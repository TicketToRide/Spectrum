// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(jQuery) {
    var $, $event, AwesomeGallery, CustomAdapter, FooBoxAdapter, GalleryFilters, JetpackAdapter, LightboxAdapter, MagnificPopupAdapter, Modernizr, PrettyPhotoAdapter, SwipeboxAdapter, capitalize, classes, dispatchMethod, document, getStyleProperty, iLightboxAdapter, prefixes, resizeTimeout, result, setIsoTransform, testName, tests, transformFnNotations, transformProp, transitionDurProp, transitionEndEvent, transitionProp, _ref, _ref1, _ref2, _ref3;
    if (!jQuery) {
      return alert('Message from UberGrid: jQuery not found!');
    } else {
      if (parseInt(jQuery().jquery.replace(/\./g, '')) < 172) {
        return alert('Message from Awesome Gallery: You have jQuery < 1.7.2. Please upgrade your jQuery or enable "Force new jQuery version" option at Awesome Gallery settings page.');
      } else {
        $ = jQuery;
        document = window.document;
        Modernizr = window.Modernizr;
        transitionEndEvent = null;
        capitalize = function(str) {
          return str.charAt(0).toUpperCase() + str.slice(1);
        };
        prefixes = "Moz Webkit O Ms".split(" ");
        getStyleProperty = function(propName) {
          var i, len, prefixed, style;
          style = document.documentElement.style;
          prefixed = void 0;
          if (typeof style[propName] === "string") {
            return propName;
          }
          propName = capitalize(propName);
          i = 0;
          len = prefixes.length;
          while (i < len) {
            prefixed = prefixes[i] + propName;
            if (typeof style[prefixed] === "string") {
              return prefixed;
            }
            i++;
          }
        };
        transformProp = getStyleProperty("transform");
        transitionProp = getStyleProperty("transitionProperty");
        tests = {
          csstransforms: function() {
            return !!transformProp;
          },
          csstransforms3d: function() {
            var $div, $style, mediaQuery, test, vendorCSSPrefixes;
            test = !!getStyleProperty("perspective");
            if (test) {
              vendorCSSPrefixes = " -o- -moz- -ms- -webkit- -khtml- ".split(" ");
              mediaQuery = "@media (" + vendorCSSPrefixes.join("transform-3d),(") + "modernizr)";
              $style = $("<style>" + mediaQuery + "{#modernizr{height:3px}}" + "</style>").appendTo("head");
              $div = $("<div id=\"modernizr\" />").appendTo("html");
              test = $div.height() === 3;
              $div.remove();
              $style.remove();
            }
            return test;
          },
          csstransitions: function() {
            return !!transitionProp;
          }
        };
        testName = void 0;
        if (Modernizr) {
          for (testName in tests) {
            if (!Modernizr.hasOwnProperty(testName)) {
              Modernizr.addTest(testName, tests[testName]);
            }
          }
        } else {
          Modernizr = window.Modernizr = {
            _version: "1.6ish: miniModernizr for Isotope"
          };
          classes = " ";
          result = void 0;
          for (testName in tests) {
            result = tests[testName]();
            Modernizr[testName] = result;
            classes += " " + (result ? "" : "no-") + testName;
          }
          $("html").addClass(classes);
        }
        /*
        				provides hooks for .css({ scale: value, translate: [x, y] })
        				Progressively enhanced CSS transforms
        				Uses hardware accelerated 3D transforms for Safari
        				or falls back to 2D transforms.
        */

        if (Modernizr.csstransforms) {
          transformFnNotations = (Modernizr.csstransforms3d ? {
            translate: function(position) {
              return "translate3d(" + position[0] + "px, " + position[1] + "px, 0) ";
            },
            scale: function(scale) {
              return "scale3d(" + scale + ", " + scale + ", 1) ";
            }
          } : {
            translate: function(position) {
              return "translate(" + position[0] + "px, " + position[1] + "px) ";
            },
            scale: function(scale) {
              return "scale(" + scale + ") ";
            }
          });
          setIsoTransform = function(elem, name, value) {
            var data, fnName, newData, scaleFn, transformObj, transformValue, translateFn, valueFns;
            data = $.data(elem, "isoTransform") || {};
            newData = {};
            fnName = void 0;
            transformObj = {};
            transformValue = void 0;
            newData[name] = value;
            $.extend(data, newData);
            for (fnName in data) {
              transformValue = data[fnName];
              transformObj[fnName] = transformFnNotations[fnName](transformValue);
            }
            translateFn = transformObj.translate || "";
            scaleFn = transformObj.scale || "";
            valueFns = translateFn + scaleFn;
            $.data(elem, "isoTransform", data);
            elem.style[transformProp] = valueFns;
          };
          $.cssNumber.scale = true;
          $.cssHooks.scale = {
            set: function(elem, value) {
              setIsoTransform(elem, "scale", value);
            },
            get: function(elem, computed) {
              var transform;
              transform = $.data(elem, "isoTransform");
              if (transform && transform.scale) {
                return transform.scale;
              } else {
                return 1;
              }
            }
          };
          $.fx.step.scale = function(fx) {
            $.cssHooks.scale.set(fx.elem, fx.now + fx.unit);
          };
          $.cssNumber.translate = true;
          $.cssHooks.translate = {
            set: function(elem, value) {
              setIsoTransform(elem, "translate", value);
            },
            get: function(elem, computed) {
              var transform;
              transform = $.data(elem, "isoTransform");
              if (transform && transform.translate) {
                return transform.translate;
              } else {
                return [0, 0];
              }
            }
          };
        }
        transitionEndEvent = void 0;
        transitionDurProp = void 0;
        if (Modernizr.csstransitions) {
          transitionEndEvent = {
            WebkitTransitionProperty: "webkitTransitionEnd",
            MozTransitionProperty: "transitionend",
            OTransitionProperty: "oTransitionEnd otransitionend",
            transitionProperty: "transitionend"
          };
          [
            {
              transitionProp: transitionProp
            }
          ];
          transitionDurProp = getStyleProperty("transitionDuration");
        }
        $event = $.event;
        dispatchMethod = ($.event.handle ? "handle" : "dispatch");
        resizeTimeout = void 0;
        $event.special.smartresize = {
          setup: function() {
            $(this).bind("resize", $event.special.smartresize.handler);
          },
          teardown: function() {
            $(this).unbind("resize", $event.special.smartresize.handler);
          },
          handler: function(event, execAsap) {
            var args, context;
            context = this;
            args = arguments;
            event.type = "smartresize";
            if (resizeTimeout) {
              clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(function() {
              $event[dispatchMethod].apply(context, args);
            }, (execAsap === "execAsap" ? 0 : 100));
          }
        };
        $.fn.smartresize = function(fn) {
          if (fn) {
            return this.bind("smartresize", fn);
          } else {
            return this.trigger("smartresize", ["execAsap"]);
          }
        };
        LightboxAdapter = (function() {
          LightboxAdapter.create = function($images, config) {
            switch (config.name) {
              case 'magnific-popup':
                return new MagnificPopupAdapter($images, config);
              case 'swipebox':
                return new SwipeboxAdapter($images, config);
              case 'prettyphoto':
                return new PrettyPhotoAdapter($images, config);
              case 'ilightbox':
                return new iLightboxAdapter($images, config);
              case 'jetpack':
                return new JetpackAdapter($images, config);
              case 'foobox':
                return new FooBoxAdapter($images, config);
              default:
                return null;
            }
          };

          function LightboxAdapter($el, config) {
            this.resetHash = __bind(this.resetHash, this);
            this.onPrevSlide = __bind(this.onPrevSlide, this);
            this.onNextSlide = __bind(this.onNextSlide, this);
            this.onAfterClose = __bind(this.onAfterClose, this);
            this.onKeyUp = __bind(this.onKeyUp, this);
            this.setHash = __bind(this.setHash, this);
            this.getInstanceIndex = __bind(this.getInstanceIndex, this);
            this.getID = __bind(this.getID, this);
            this.onImageClicked = __bind(this.onImageClicked, this);
            this.getLightboxCaption2 = __bind(this.getLightboxCaption2, this);
            this.getLightboxCaption1 = __bind(this.getLightboxCaption1, this);
            this.getSlug = __bind(this.getSlug, this);
            this.getId = __bind(this.getId, this);
            this.getAllLightboxLinks = __bind(this.getAllLightboxLinks, this);
            this.getLightboxLinks = __bind(this.getLightboxLinks, this);
            this.getDeeplinkImage = __bind(this.getDeeplinkImage, this);
            this.clickImage = __bind(this.clickImage, this);
            this.loadDeepLink = __bind(this.loadDeepLink, this);
            this.checkForDeeplink = __bind(this.checkForDeeplink, this);
            this.addImages = __bind(this.addImages, this);
            this.reset = __bind(this.reset, this);
            this.$el = $el;
            this.config = config;
            this.reset();
            this.checkForDeeplink();
          }

          LightboxAdapter.prototype.reset = function() {
            this.getAllLightboxLinks().off('click', this.onImageClicked);
            return this.getLightboxLinks().on('click', this.onImageClicked);
          };

          LightboxAdapter.prototype.addImages = function(images) {
            return this.reset();
          };

          LightboxAdapter.prototype.checkForDeeplink = function() {
            var gridId, image;
            if (location.hash.match(/^#\d+\-/)) {
              gridId = location.hash.replace(/^\#/, '').replace(/\-.*/, '');
              if (gridId !== this.getId()) {
                return false;
              }
              image = location.hash.replace(/^.*\//, '');
              this.loadDeepLink(image);
              return true;
            }
          };

          LightboxAdapter.prototype.loadDeepLink = function(image) {
            var linkedImage;
            linkedImage = this.getDeeplinkImage(image);
            if (linkedImage.length > 0) {
              return this.clickImage(linkedImage);
            } else {
              return this.config.loadMoreCallback();
            }
          };

          LightboxAdapter.prototype.clickImage = function(image) {
            return $(image).find('a.asg-lightbox').click();
          };

          LightboxAdapter.prototype.getDeeplinkImage = function(id) {
            var _this = this;
            return jQuery.grep(this.getLightboxLinks().closest('.asg-image'), function(cell) {
              return $(cell).data('slug').toString() === id;
            });
          };

          LightboxAdapter.prototype.linkSelector = '.asg-image:not(.asg-hidden) .asg-image-wrapper.asg-lightbox';

          LightboxAdapter.prototype.allLinkSelector = '.asg-image .asg-image-wrapper.asg-lightbox';

          LightboxAdapter.prototype.getLightboxLinks = function() {
            return this.$el.find(this.linkSelector);
          };

          LightboxAdapter.prototype.getAllLightboxLinks = function() {
            return this.$el.find(this.allLinkSelector);
          };

          LightboxAdapter.prototype.getId = function() {
            return this.$el.parent().attr('id').replace(/\-\d+$/, '').replace(/^.*\-/, '');
          };

          LightboxAdapter.prototype.getSlug = function() {
            return this.$el.parent().attr('data-slug');
          };

          LightboxAdapter.prototype.getLightboxCaption1 = function(el) {
            var caption_1;
            if (caption_1 = el.find('.asg-lightbox-caption1').html()) {
              caption_1 = $('<h3 />').html(caption_1)[0].outerHTML;
            } else {
              caption_1 = '';
            }
            return caption_1;
          };

          LightboxAdapter.prototype.getLightboxCaption2 = function(el) {
            var caption_2;
            if (caption_2 = el.find('.asg-lightbox-caption2').html()) {
              caption_2 = $('<div />').html(caption_2)[0].outerHTML;
            } else {
              caption_2 = '';
            }
            return caption_2;
          };

          LightboxAdapter.prototype.onImageClicked = function(event) {
            var cell;
            cell = jQuery(event.target).closest('.asg-image');
            this.scrollTop = jQuery(document).scrollTop();
            return this.setHash(cell);
          };

          LightboxAdapter.prototype.getID = function() {
            return this.$el.parent().attr('id').replace(/\-\d+$/, '').replace(/.+\-/, '');
          };

          LightboxAdapter.prototype.getInstanceIndex = function() {
            return this.$el.parent().attr('id').replace(/.*\-/, '');
          };

          LightboxAdapter.prototype.setHash = function(cell) {
            var cellSlug, id;
            id = this.getID();
            cellSlug = cell.data('slug');
            return location.hash = "" + id + "-" + (this.getSlug()) + "/" + cellSlug;
          };

          LightboxAdapter.prototype.onKeyUp = function(event) {
            if (event.keyCode === 37) {
              return this.onPrevSlide();
            } else if (event.keyCode === 39) {
              return this.onNextSlide();
            } else if (event.keyCode === 27) {
              return this.onAfterClose();
            }
          };

          LightboxAdapter.prototype.onAfterClose = function() {
            $(window).off('keyup', this.onKeyup);
            return this.resetHash();
          };

          LightboxAdapter.prototype.onNextSlide = function() {
            var lightboxLinks;
            this.currentIndex += 1;
            lightboxLinks = this.getLightboxLinks();
            if (this.currentIndex === lightboxLinks.length) {
              this.currentIndex = lightboxLinks.length - 1;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.asg-image'));
          };

          LightboxAdapter.prototype.onPrevSlide = function() {
            this.currentIndex -= 1;
            if (this.currentIndex < 0) {
              this.currentIndex = 0;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.asg-image'));
          };

          LightboxAdapter.prototype.resetHash = function() {
            location.hash = '#';
            if (this.scrollTop && this.scrollTop > 0) {
              return jQuery(document).scrollTop(this.scrollTop);
            }
          };

          return LightboxAdapter;

        }).call(this);
        CustomAdapter = (function(_super) {
          __extends(CustomAdapter, _super);

          function CustomAdapter() {
            _ref = CustomAdapter.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          return CustomAdapter;

        })(LightboxAdapter);
        FooBoxAdapter = (function(_super) {
          __extends(FooBoxAdapter, _super);

          function FooBoxAdapter() {
            this.addImages = __bind(this.addImages, this);
            this.initFoobox = __bind(this.initFoobox, this);
            this.fooboxPresent = __bind(this.fooboxPresent, this);
            this.reset = __bind(this.reset, this);
            _ref1 = FooBoxAdapter.__super__.constructor.apply(this, arguments);
            return _ref1;
          }

          FooBoxAdapter.prototype.reset = function() {
            var _this = this;
            FooBoxAdapter.__super__.reset.call(this);
            if (this.fooboxPresent()) {
              return this.initFoobox();
            } else {
              return $(function() {
                if (_this.fooboxPresent()) {
                  return _this.initFoobox();
                }
              });
            }
          };

          FooBoxAdapter.prototype.fooboxPresent = function() {
            return window.FOOBOX && window.FOOBOX.o;
          };

          FooBoxAdapter.prototype.initFoobox = function() {
            var fooboxOptions,
              _this = this;
            fooboxOptions = jQuery.extend(window.FOOBOX.o, {
              deeplinking: false,
              affiliate: false,
              slideshow: {
                enabled: true
              },
              selector: this.linkSelector
            });
            return this.$el.foobox(fooboxOptions).on('foobox.afterLoad', function(event) {
              return _this.setHash(_this.getLightboxLinks().eq(event.fb.item.index).closest('.asg-image'));
            }).on('foobox.close', function() {
              return _this.resetHash();
            });
          };

          FooBoxAdapter.prototype.addImages = function(images) {
            var image, _i, _len;
            for (_i = 0, _len = images.length; _i < _len; _i++) {
              image = images[_i];
              image = $(image).closest('.asg-image');
              image.attr('title', this.getLightboxCaption1(image));
              image.find('img').attr('alt', this.getLightboxCaption2(image));
            }
            return FooBoxAdapter.__super__.addImages.call(this, images);
          };

          return FooBoxAdapter;

        })(LightboxAdapter);
        JetpackAdapter = (function(_super) {
          __extends(JetpackAdapter, _super);

          function JetpackAdapter($el, config) {
            this.onPrevSlide = __bind(this.onPrevSlide, this);
            this.onNextSlide = __bind(this.onNextSlide, this);
            this.setHashFromCurrentIndex = __bind(this.setHashFromCurrentIndex, this);
            this.onAfterClose = __bind(this.onAfterClose, this);
            this.startCarousel = __bind(this.startCarousel, this);
            this.onImageClicked = __bind(this.onImageClicked, this);
            this.addImages = __bind(this.addImages, this);
            JetpackAdapter.__super__.constructor.call(this, $el, config);
            this.$el.data('carousel-extra', {
              blog_id: 1,
              permalink: 'http://awesome-gallery.dev'
            });
          }

          JetpackAdapter.prototype.addImages = function(images) {
            var image, url, wrapper, _i, _len;
            images.addClass('tiled-gallery-item');
            for (_i = 0, _len = images.length; _i < _len; _i++) {
              image = images[_i];
              image = $(image);
              wrapper = image.closest('.asg-image');
              url = image.find('.asg-image-wrapper').attr('href');
              image.find('img').data({
                'orig-file': url,
                'orig-size': "" + (wrapper.data('width')) + "," + (wrapper.data('height')),
                'large-file': url,
                'medium-file': url,
                'small-file': url,
                'image-title': this.getLightboxCaption1(wrapper),
                'image-description': this.getLightboxCaption2(wrapper),
                'image-meta': wrapper.data('meta'),
                'attachment-id': wrapper.data('attachment-id') ? wrapper.data('attachment-id') : 'asg-hack',
                'comments-opened': wrapper.data('attachment-id') ? 1 : null
              });
            }
            return images.on('click', this.onImageClicked);
          };

          JetpackAdapter.prototype.onImageClicked = function(event) {
            var _this = this;
            event.preventDefault();
            if ($.fn.jp_carousel) {
              return this.startCarousel(event);
            } else {
              return $(document).ready(setTimeout((function() {
                return _this.startCarousel(event);
              }), 500));
            }
          };

          JetpackAdapter.prototype.startCarousel = function(event) {
            var _this = this;
            this.currentIndex = this.$el.find(this.linkSelector).index($(event.target).closest('.asg-image-wrapper'));
            if (this.$el.jp_carousel) {
              this.$el.jp_carousel({
                start_index: this.currentIndex,
                'items_selector': ".asg-image:not(.asg-hidden) .asg-image-wrapper img"
              });
              return setTimeout(this.setHashFromCurrentIndex, 500);
            } else {
              return $(document).ready(function() {
                return setTimeout(function() {
                  _this.$el.jp_carousel({
                    start_index: _this.currentIndex,
                    'items_selector': ".asg-image:not(.asg-hidden) .asg-image-wrapper img"
                  });
                  return setTimeout(_this.setHashFromCurrentIndex, 500);
                }, 600);
              });
            }
          };

          JetpackAdapter.prototype.onAfterClose = function() {
            JetpackAdapter.__super__.onAfterClose.apply(this, arguments);
            jQuery(document).off('keyup', this.onKeyUp);
            $('.jp-carousel-next-button').off('click', this.onNextSlide);
            return $('.jp-carousel-previous-button').off('click', this.onPrevSlide);
          };

          JetpackAdapter.prototype.setHashFromCurrentIndex = function() {
            this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.asg-image'));
            $('.jp-carousel-next-button').click(this.onNextSlide);
            $('.jp-carousel-previous-button').click(this.onPrevSlide);
            $(document).on('keyup', this.onKeyUp);
            return $(document).on('click', '.jp-carousel-close-hint', this.onAfterClose);
          };

          JetpackAdapter.prototype.onNextSlide = function() {
            var lightboxLinks;
            this.currentIndex += 1;
            lightboxLinks = this.getLightboxLinks();
            if (this.currentIndex === lightboxLinks.length) {
              this.currentIndex = 0;
            }
            return setTimeout(this.setHashFromCurrentIndex, 400);
          };

          JetpackAdapter.prototype.onPrevSlide = function() {
            this.currentIndex -= 1;
            if (this.currentIndex < 0) {
              this.currentIndex = this.getLightboxLinks().size() - 1;
            }
            return setTimeout(this.setHashFromCurrentIndex, 400);
          };

          return JetpackAdapter;

        })(LightboxAdapter);
        MagnificPopupAdapter = (function(_super) {
          __extends(MagnificPopupAdapter, _super);

          function MagnificPopupAdapter($el, config) {
            var _this = this;
            $el.magnificPopup({
              type: 'image',
              delegate: this.linkSelector,
              gallery: {
                enabled: true
              },
              mainClass: 'mfp-asg',
              image: {
                titleSrc: function() {
                  var caption_1, caption_2, el;
                  el = this.currItem.el.parent();
                  if (caption_1 = el.find('.asg-lightbox-caption1').html()) {
                    caption_1 = $('<h3 />').html(caption_1)[0].outerHTML;
                  } else {
                    caption_1 = '';
                  }
                  if (caption_2 = el.find('.asg-lightbox-caption2').html()) {
                    caption_2 = $('<div />').html(caption_2)[0].outerHTML;
                  } else {
                    caption_2 = '';
                  }
                  if (caption_1 + caption_2) {
                    return caption_1 + caption_2;
                  }
                  return null;
                },
                markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<div class="mfp-asg-border"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>'
              },
              callbacks: {
                open: (function() {
                  return jQuery('.mfp-wrap').addClass('mfp-asg');
                }),
                markupParse: (function(template) {
                  return template.find('.mfp-counter').remove();
                }),
                afterClose: function() {
                  return _this.resetHash();
                },
                afterChange: function() {
                  return _this.setHash(this.currItem.el.closest('.asg-image'));
                }
              }
            });
            MagnificPopupAdapter.__super__.constructor.call(this, $el, config);
          }

          return MagnificPopupAdapter;

        })(LightboxAdapter);
        SwipeboxAdapter = (function(_super) {
          __extends(SwipeboxAdapter, _super);

          function SwipeboxAdapter() {
            this.onImageClicked = __bind(this.onImageClicked, this);
            _ref2 = SwipeboxAdapter.__super__.constructor.apply(this, arguments);
            return _ref2;
          }

          SwipeboxAdapter.prototype.onImageClicked = function(event) {
            var elements, lightboxImages,
              _this = this;
            SwipeboxAdapter.__super__.onImageClicked.call(this, event);
            event.preventDefault();
            elements = this.$el.find(this.linkSelector);
            lightboxImages = $.map(elements, function(image) {
              image = $(image);
              return {
                href: image.attr('href'),
                title: function() {
                  var caption1, caption2, html;
                  image = image.closest('.asg-image');
                  html = $('<div/>');
                  if (caption2 = _this.getLightboxCaption2(image)) {
                    html.append($('<small class="asg-small"/>').html(caption2));
                  }
                  if (caption1 = _this.getLightboxCaption1(image)) {
                    html.append($('<div />').html(caption1));
                  }
                  return html.html();
                }
              };
            });
            this.currentIndex = elements.index($(event.target).closest('a.asg-image-wrapper'));
            $.swipebox(lightboxImages, {
              initialIndexOnArray: this.currentIndex
            });
            jQuery('#swipebox-next').click(this.onNextSlide);
            jQuery('#swipebox-prev').click(this.onPrevSlide);
            return jQuery(window).on('keyup', this.onKeyUp);
          };

          return SwipeboxAdapter;

        })(LightboxAdapter);
        PrettyPhotoAdapter = (function(_super) {
          __extends(PrettyPhotoAdapter, _super);

          function PrettyPhotoAdapter() {
            this.onPrevSlide = __bind(this.onPrevSlide, this);
            this.onNextSlide = __bind(this.onNextSlide, this);
            this.onKeyUp = __bind(this.onKeyUp, this);
            this.onImageClicked = __bind(this.onImageClicked, this);
            _ref3 = PrettyPhotoAdapter.__super__.constructor.apply(this, arguments);
            return _ref3;
          }

          PrettyPhotoAdapter.prototype.onImageClicked = function(event) {
            var descriptions, elements, titles, urls,
              _this = this;
            event.preventDefault();
            elements = this.$el.find(this.linkSelector);
            urls = elements.map(function(index, image) {
              return $(image).closest('a.asg-image-wrapper').attr('href');
            });
            titles = elements.map(function(index, image) {
              return _this.getLightboxCaption1($(image).closest('.asg-image'));
            });
            descriptions = elements.map(function(index, image) {
              return _this.getLightboxCaption2($(image).closest('.asg-image'));
            });
            $.fn.prettyPhoto(this.config.settings);
            $.prettyPhoto.open(urls, titles, descriptions, this.currentIndex = elements.index($(event.target).closest('.asg-image-wrapper')));
            this.setHash($(event.target).closest('.asg-image'));
            $(document).on('keydown.prettyphoto', this.onKeyUp);
            $('.pp_previous').on('click.asg', this.onPrevSlide);
            return $('.pp_next').on('click.asg', this.onNextSlide);
          };

          PrettyPhotoAdapter.prototype.onKeyUp = function(event) {
            if (event.keyCode === 37) {
              return this.onPrevSlide();
            } else if (event.keyCode === 39) {
              return this.onNextSlide();
            } else if (event.keyCode === 27) {
              return this.resetHash();
            }
          };

          PrettyPhotoAdapter.prototype.onNextSlide = function() {
            var lightboxLinks;
            this.currentIndex += 1;
            lightboxLinks = this.getLightboxLinks();
            if (this.currentIndex === lightboxLinks.length) {
              this.currentIndex = lightboxLinks.length - 1;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.asg-image'));
          };

          PrettyPhotoAdapter.prototype.onPrevSlide = function() {
            this.currentIndex -= 1;
            if (this.currentIndex < 0) {
              this.currentIndex = 0;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.asg-image'));
          };

          return PrettyPhotoAdapter;

        })(LightboxAdapter);
        iLightboxAdapter = (function(_super) {
          __extends(iLightboxAdapter, _super);

          function iLightboxAdapter($el, config) {
            this.onImageClicked = __bind(this.onImageClicked, this);
            if (!$.iLightBox) {
              alert('iLightbox not detected. Please install end enable iLightbox plugin.');
            }
            iLightboxAdapter.__super__.constructor.call(this, $el, config);
          }

          iLightboxAdapter.prototype.onImageClicked = function(event) {
            var elements, index, lightboxImages, options,
              _this = this;
            iLightboxAdapter.__super__.onImageClicked.call(this, event);
            event.preventDefault();
            elements = this.$el.find(this.linkSelector);
            lightboxImages = $.map(elements, function(el) {
              var data;
              data = $(el);
              return {
                title: _this.getLightboxCaption1(data),
                url: data.attr('href'),
                caption: _this.getLightboxCaption2(data),
                thumbnail: $(el).find('.asg-image-wrapper img').attr('src')
              };
            });
            this.currentIndex = index = elements.index($(event.target).closest('.asg-image-wrapper'));
            options = $.extend(this.config.settings, ILIGHTBOX.options && eval("(" + rawurldecode(ILIGHTBOX.options) + ")") || {});
            return $.iLightBox(lightboxImages, $.extend({
              startFrom: index,
              callback: {
                onAfterChange: function(instance) {
                  _this.currentIndex = instance.currentItem;
                  return _this.setHash(elements.eq(_this.currentIndex).closest('.asg-image'));
                },
                onHide: function() {
                  return _this.resetHash();
                }
              }
            }, options));
          };

          return iLightboxAdapter;

        })(LightboxAdapter);
        GalleryFilters = (function() {
          function GalleryFilters($el, filterCallback) {
            this.onFilterClick = __bind(this.onFilterClick, this);
            this.createFilter = __bind(this.createFilter, this);
            this.createSortedFilters = __bind(this.createSortedFilters, this);
            this.createAll = __bind(this.createAll, this);
            this.add = __bind(this.add, this);
            var list;
            this.$el = $el;
            this.tags = [];
            this.filterCallback = filterCallback;
            this.current = null;
            this.$el.on('click', '.asg-filter', this.onFilterClick);
            this.$el.hide();
            this.suspendCreation = false;
            if ((list = this.$el.data('list')) && list !== '') {
              this.add(list.split(/,\s*/));
              this.suspendCreation = true;
            }
          }

          GalleryFilters.prototype.add = function(tags) {
            var tag, _i, _len;
            if (this.suspendCreation) {
              return;
            }
            for (_i = 0, _len = tags.length; _i < _len; _i++) {
              tag = tags[_i];
              if (tag === '') {
                continue;
              }
              if (!this.tags.hasOwnProperty(tag)) {
                this.tags[tag] = true;
                if (!this.$el.data('sort')) {
                  this.createFilter(tag);
                  this.$el.show();
                }
              }
            }
            if (this.$el.data('sort')) {
              this.$el.empty();
              return this.createSortedFilters();
            } else {
              if (this.tags.length !== 0) {
                return this.createAll();
              }
            }
          };

          GalleryFilters.prototype.createAll = function() {
            var all;
            this.$el.prepend(all = $("<div class='asg-filter' />").append($("<a data-tag='' href='#' />").text(this.$el.data('all'))));
            if (this.current === '' || this.current === null) {
              return all.addClass('asg-active');
            }
          };

          GalleryFilters.prototype.createSortedFilters = function() {
            var tag, tags, _i, _len;
            this.createAll();
            tags = [];
            for (tag in this.tags) {
              if (this.tags.hasOwnProperty(tag)) {
                tags.push(tag);
              }
            }
            tags.sort();
            for (_i = 0, _len = tags.length; _i < _len; _i++) {
              tag = tags[_i];
              this.createFilter(tag);
            }
            if (tags.length > 0) {
              return this.$el.show();
            }
          };

          GalleryFilters.prototype.createFilter = function(tag) {
            var a, filter;
            filter = $('<div class="asg-filter" />').append(a = $("<a href='#' />").text(tag).attr('data-tag', tag)).appendTo(this.$el);
            if (tag === this.current) {
              return filter.addClass('asg-active');
            }
          };

          GalleryFilters.prototype.onFilterClick = function(event) {
            var filter;
            event.preventDefault();
            filter = $(event.target);
            this.$el.find('> div').removeClass('asg-active');
            $(filter).parent().addClass('asg-active');
            this.current = $(filter).attr('data-tag');
            return this.filterCallback(this.current);
          };

          return GalleryFilters;

        })();
        AwesomeGallery = (function() {
          var AnimationQueue, GalleryImage, GridLayoutStrategy, HorizontalFlowLayoutStrategy, ImageCaption, ImageOverlay, LayoutStrategy, SlidingElement, VerticalFlowLayoutStrategy, _ref4, _ref5, _ref6;

          function AwesomeGallery(id, config) {
            this.dispose = __bind(this.dispose, this);
            this.applyFiltering = __bind(this.applyFiltering, this);
            this.getFilteredImages = __bind(this.getFilteredImages, this);
            this.add = __bind(this.add, this);
            this.loadMore = __bind(this.loadMore, this);
            this.initLoadMore = __bind(this.initLoadMore, this);
            this.loadMoreActive = __bind(this.loadMoreActive, this);
            this.deepLinkLoadMoreCallback = __bind(this.deepLinkLoadMoreCallback, this);
            this.showDeeplinkLoadOverlay = __bind(this.showDeeplinkLoadOverlay, this);
            this.showWhenVisible = __bind(this.showWhenVisible, this);
            var lightboxConfig,
              _this = this;
            this.$window = $(window);
            this.id = id;
            this.config = config;
            this.page = 1;
            this.$el = $("#awesome-gallery-" + id);
            this.$el.data('awesome-gallery', this);
            this.$images = this.$el.find('.asg-images');
            this.recursive = 0;
            this.animationQueue = new AnimationQueue();
            if ((this.$filters = this.$el.find('.asg-filters')).size() > 0) {
              this.filters = new GalleryFilters(this.$filters, this.applyFiltering);
            }
            this.images = [];
            this.layout = LayoutStrategy.create(this.$images, this.config.layout, this.animationQueue);
            this.loading = false;
            this.loadMoreCount = 0;
            lightboxConfig = this.config.lightbox;
            if (this.loadMoreActive()) {
              lightboxConfig = $.extend({
                loadMoreCallback: this.deepLinkLoadMoreCallback
              }, lightboxConfig);
              this.initLoadMore();
            }
            this.lightboxAdapter = LightboxAdapter.create(this.$images, lightboxConfig);
            this.add(this.$el.find('.asg-image'));
            ({
              showWhenVisible: function() {}
            });
            if (!this.$el.is(':visible') || this.$el.width() < 50) {
              setTimeout(this.showWhenVisible, 500);
            }
          }

          AwesomeGallery.prototype.showWhenVisible = function() {
            if (!this.$el.is(':visible') || this.$el.width() < 50) {
              return setTimeout(this.showWhenVisible, 500);
            } else {
              return this.layout.reLayout();
            }
          };

          AwesomeGallery.prototype.showDeeplinkLoadOverlay = function() {
            return this.$images.append('<div class="asg-deeplink-overlay"><div class="asg-deeplink-loader"></div></div>');
          };

          AwesomeGallery.prototype.deepLinkLoadMoreCallback = function() {
            var _this = this;
            this.loadMoreCount += 1;
            this.showDeeplinkLoadOverlay();
            if (this.loadMoreCount < 3) {
              return this.loadMore(function() {
                if (_this.lightboxAdapter.checkForDeeplink()) {
                  return _this.$images.find('.asg-deeplink-overlay').remove();
                }
              });
            } else {
              return this.$images.find('.asg-deeplink-overlay').remove();
            }
          };

          AwesomeGallery.prototype.loadMoreActive = function() {
            return this.$el.find('.asg-bottom').size() > 0;
          };

          AwesomeGallery.prototype.initLoadMore = function() {
            var _this = this;
            if ((this.$loadMore = this.$el.find('.asg-bottom .asg-load-more')).size() > 0) {
              return this.$loadMore.click(function() {
                _this.recursive = 0;
                return _this.loadMore();
              });
            } else {
              return this.$window.on('scroll.asg', function() {
                if (!(_this.loading || _this.allLoaded)) {
                  if (_this.$images.height() + _this.$images.offset().top - 400 < _this.$window.scrollTop() + _this.$window.height()) {
                    return _this.loadMore();
                  }
                }
              });
            }
          };

          AwesomeGallery.prototype.loadMore = function(callback) {
            var _this = this;
            if (this.loading || this.allLoaded) {
              return;
            }
            this.loading = true;
            if (this.$loadMore && this.$loadMore.size() > 0) {
              this.$loadMore.hide();
            }
            this.$loading = this.$el.find('.asg-bottom .asg-loading').addClass('asg-visible');
            return setTimeout(function() {
              return $.post("" + _this.config.ajaxurl + "&page=" + (_this.page + 1) + "&id=" + _this.id, function(response) {
                var tmp;
                _this.loading = false;
                _this.page += 1;
                _this.$loading.removeClass('asg-visible');
                if (response.have_more) {
                  _this.$loadMore.show();
                } else {
                  _this.$el.find('.asg-bottom .asg-all-loaded').show();
                  _this.allLoaded = true;
                }
                tmp = $('<div/>').html(response.images);
                _this.add(tmp.find('.asg-image').appendTo(_this.$images));
                if (callback) {
                  return callback();
                }
              });
            }, 50);
          };

          AwesomeGallery.prototype.add = function(images) {
            var image, newFilteredImages, newImage, newImages, _i, _len;
            newImages = [];
            for (_i = 0, _len = images.length; _i < _len; _i++) {
              image = images[_i];
              newImage = new GalleryImage($(image), this.animationQueue, this.config);
              this.images.push(newImage);
              newImages.push(newImage);
              if (this.filters) {
                this.filters.add(newImage.getTags());
              }
            }
            if (this.lightboxAdapter) {
              this.lightboxAdapter.addImages(images);
            }
            newFilteredImages = this.getFilteredImages(newImages);
            this.layout.add(newImages);
            this.layout.layout(newFilteredImages);
            if (newFilteredImages.length > 0) {

            } else {
              if (!this.loading && this.recursive < 2) {
                this.recursive += 1;
                return this.loadMore();
              }
            }
          };

          AwesomeGallery.prototype.getFilteredImages = function(images) {
            var _this = this;
            return images = $.grep(images, function(item) {
              var matches;
              matches = !_this.currentFilter || (jQuery.inArray(_this.currentFilter, item.getTags()) !== -1);
              if (matches) {
                item.show();
              } else {
                item.hide();
              }
              return matches;
            });
          };

          AwesomeGallery.prototype.applyFiltering = function(filter) {
            this.currentFilter = filter;
            this.layout.reLayout(this.getFilteredImages(this.images));
            if (this.lightboxAdapter) {
              this.lightboxAdapter.reset();
            }
            return this.recursive = 0;
          };

          AwesomeGallery.prototype.dispose = function() {
            this.$window.off('scroll', this.windowScrolled);
            if (this.$loadMore) {
              this.$loadMore.off('click', this.loadNextPage);
            }
            return this.layout.dispose();
          };

          SlidingElement = (function() {
            function SlidingElement($el, $wrapper, animationQueue) {
              this.slideOut = __bind(this.slideOut, this);
              this.cleanupClass = __bind(this.cleanupClass, this);
              this.slideIn = __bind(this.slideIn, this);
              this.getTransitionClass = __bind(this.getTransitionClass, this);
              var _this = this;
              this.$el = $el;
              this.$wrapper = $wrapper;
              this.animationQueue = animationQueue;
              this.$el.on(transitionEndEvent[transitionProp], this.cleanupClass);
              if (!($el.hasClass('asg-position-bottom') && $el.hasClass('asg-effect-slide') && $el.hasClass('asg-on-hover'))) {
                if (!this.$el.hasClass('asg-off-hover')) {
                  this.$wrapper.on('mouseout', this.cleanupClass);
                }
                if (this.$el.hasClass('asg-on-hover') && this.$el.hasClass('asg-effect-slide')) {
                  this.$wrapper.hover((function(event) {
                    return _this.slideIn(event);
                  }), function(event) {
                    return _this.slideOut(event);
                  });
                }
              }
              if (this.$el.hasClass('asg-off-hover') && this.$el.hasClass('asg-effect-slide')) {
                this.$wrapper.hover((function(event) {
                  return _this.slideOut(event);
                }), function(event) {
                  return _this.slideIn(event);
                });
              }
            }

            SlidingElement.prototype.getTransitionClass = function(event) {
              var klass, x, y;
              x = event.offsetX - this.$wrapper.width() / 2;
              y = event.offsetY - this.$wrapper.height() / 2;
              if (x > 0) {
                if (Math.abs(x) > Math.abs(y)) {
                  klass = 'asg-slide-right';
                } else {
                  if (y < 0) {
                    klass = 'asg-slide-top';
                  } else {
                    klass = 'asg-slide-bottom';
                  }
                }
              } else {
                if (Math.abs(x) > Math.abs(y)) {
                  klass = 'asg-slide-left';
                } else {
                  if (y < 0) {
                    klass = 'asg-slide-top';
                  } else {
                    klass = 'asg-slide-bottom';
                  }
                }
              }
              return klass;
            };

            SlidingElement.prototype.slideIn = function(event) {
              this.$el.addClass('asg-no-transition');
              this.cleanupClass();
              this.$el.addClass(this.getTransitionClass(event));
              this.$el.height();
              this.$el.removeClass('asg-no-transition');
              return this.cleanupClass();
            };

            SlidingElement.prototype.cleanupClass = function() {
              var klass, _i, _len, _ref4, _results;
              _ref4 = ['asg-slide-left', 'asg-slide-right', 'asg-slide-top', 'asg-slide-bottom'];
              _results = [];
              for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                klass = _ref4[_i];
                _results.push(this.$el.removeClass(klass));
              }
              return _results;
            };

            SlidingElement.prototype.slideOut = function(event) {
              var klass;
              klass = this.getTransitionClass(event);
              return this.$el.addClass(klass);
            };

            return SlidingElement;

          })();

          ImageOverlay = (function(_super) {
            __extends(ImageOverlay, _super);

            function ImageOverlay($el, $wrapper, animationQueue) {
              ImageOverlay.__super__.constructor.call(this, $el, $wrapper, animationQueue);
            }

            return ImageOverlay;

          })(SlidingElement);

          ImageCaption = (function(_super) {
            __extends(ImageCaption, _super);

            function ImageCaption($el, $wrapper, animationQueue) {
              this.layout = __bind(this.layout, this);
              var h, img,
                _this = this;
              ImageCaption.__super__.constructor.call(this, $el, $wrapper, animationQueue);
              this.centered = $el.hasClass('asg-position-center');
              if (this.centered) {
                $wrapper.hover((function() {
                  return $el.css({
                    'margin-top': -$el.outerHeight() / 2
                  });
                }), null);
                $el.on('resize', function() {
                  return _this.layout();
                });
              }
              img = $el.parent().find('img');
              h = $el.height();
              if ($el.hasClass('asg-position-bottom') && $el.hasClass('asg-effect-slide') && $el.hasClass('asg-on-hover')) {
                this.$wrapper.hover((function() {
                  h = $el.outerHeight();
                  img.animate({
                    'top': "-" + (h / 2) + "px"
                  }, {
                    'queue': false,
                    duration: 400
                  });
                  return $el.css({
                    bottom: "-" + h + "px"
                  }).animate({
                    bottom: 0
                  }, {
                    queue: false,
                    duration: 350
                  });
                }), (function() {
                  img.animate({
                    top: 0
                  }, {
                    queue: false,
                    duration: 400
                  });
                  return $el.animate({
                    bottom: "-" + h + "px"
                  }, {
                    queue: false,
                    duration: 350
                  });
                }));
              }
            }

            ImageCaption.prototype.layout = function() {
              var _this = this;
              if (this.centered) {
                if (this.$el.hasClass('asg-mode-on') || this.$el.hasClass('asg-mode-on-hover')) {
                  this.$el.css({
                    opacity: 0
                  });
                }
                return setTimeout(function() {
                  var style;
                  style = {
                    'margin-top': -_this.$el.outerHeight() / 2
                  };
                  if (_this.$el.hasClass('asg-mode-on') || _this.$el.hasClass('asg-mode-on-hover')) {
                    _this.$el.css('opacity', '');
                  }
                  return _this.$el.css(style);
                }, Math.random(500) + 600);
              }
            };

            return ImageCaption;

          })(SlidingElement);

          AnimationQueue = (function() {
            function AnimationQueue() {
              this.flush = __bind(this.flush, this);
              this.clear = __bind(this.clear, this);
              this.enqueue = __bind(this.enqueue, this);
            }

            AnimationQueue.prototype.queue = [];

            AnimationQueue.prototype.queues = [];

            AnimationQueue.prototype.flushInterval = null;

            AnimationQueue.prototype.flushTimespan = 10;

            AnimationQueue.prototype.enqueue = function($el, style) {
              this.queue.push([$el, style]);
              if (!this.flushInterval) {
                return this.flushInterval = setTimeout(this.flush, this.flushTimespan);
              }
            };

            AnimationQueue.prototype.clear = function() {
              this.queue = [];
              clearTimeout(this.flushInterval);
              return this.flushInterval = null;
            };

            AnimationQueue.prototype.flush = function() {
              var i, item;
              i = 50;
              while (i > 0 && this.queue.length > 0) {
                item = this.queue.shift();
                item[0].css(item[1]);
                i -= 1;
              }
              if (this.queue.length > 0) {
                this.flushInterval = setTimeout(this.flush, this.flushTimespan);
                return this.flushInterval = null;
              }
            };

            return AnimationQueue;

          })();

          GalleryImage = (function() {
            function GalleryImage($el, animationQueue, config) {
              this.slideIn = __bind(this.slideIn, this);
              this.layout = __bind(this.layout, this);
              this.getTags = __bind(this.getTags, this);
              this.show = __bind(this.show, this);
              this.hide = __bind(this.hide, this);
              var $caption, $overlay,
                _this = this;
              this.$el = $el;
              this.animationQueue = animationQueue;
              this.$image = this.$el.find('.asg-image-wrapper img');
              if (window.devicePixelRatio) {
                this.$image.attr('src', this.$image.attr('src') + ("&zoom=" + window.devicePixelRatio));
              }
              if (this.$image[0].complete || this.$image[0].naturalWidth > 0) {
                this.$el.addClass('asg-loaded');
              } else {
                this.$image.on('load', function() {
                  return _this.$el.addClass('asg-loaded');
                });
              }
              this.naturalWidth = this.$el.data('width');
              this.naturalHeight = this.$el.data('height');
              this.$el.data('asg-image', this);
              this.config = config;
              if (($overlay = this.$el.find('.asg-image-overlay')).size() > 0) {
                this.overlay = new ImageOverlay($overlay, this.$el, this.animationQueue);
              }
              if (($caption = this.$el.find('.asg-image-caption-wrapper')).size() > 0) {
                this.caption = new ImageCaption($caption, this.$el, this.animationQueue);
              }
              this.laidOut = false;
              this.$el.on('transitionend', function() {
                return setTimeout(function() {
                  _this.$el.addClass('asg-laid-out');
                  return _this.laidOut = true;
                }, Math.random() * 1000 + 100);
              });
            }

            GalleryImage.prototype.hide = function() {
              return this.$el.addClass('asg-hidden');
            };

            GalleryImage.prototype.show = function() {
              return this.$el.removeClass('asg-hidden');
            };

            GalleryImage.prototype.getTags = function() {
              if (this.tags) {
                return this.tags;
              }
              return this.tags = this.$el.data('tags').split(', ');
            };

            GalleryImage.prototype.layout = function(x, y, width, height) {
              var css,
                _this = this;
              if (!this.laidOut) {
                setTimeout(function() {
                  _this.$el.addClass('asg-laid-out');
                  return _this.laidOut = true;
                }, Math.random() * 1000 + 100);
              }
              if (Modernizr.csstransforms && Modernizr.csstransitions) {
                css = {
                  translate: [x, y]
                };
              } else {
                css = {
                  left: x,
                  top: y
                };
              }
              if (width && height) {
                this.animationQueue.enqueue(this.$el, $.extend(css, {
                  width: width,
                  height: height
                }));
              } else {
                this.animationQueue.enqueue(this.$el, css);
              }
              if (this.caption) {
                return this.caption.layout();
              }
            };

            GalleryImage.prototype.slideIn = function(event, element, zero) {
              var css, x, y;
              x = event.offsetX - this.wrapper.width() / 2;
              y = event.offsetY - this.wrapper.height() / 2;
              if (Math.abs(x) > Math.abs(y)) {
                if (x > 0) {
                  css = {
                    'left': "" + (this.wrapper.width()) + "px",
                    top: 0
                  };
                } else {
                  css = {
                    'left': "-" + (this.wrapper.width()) + "px",
                    top: 0
                  };
                }
              } else {
                if (y < 0) {
                  css = {
                    'top': "-" + (this.wrapper.height()) + "px",
                    left: 0
                  };
                } else {
                  css = {
                    'top': "" + (this.wrapper.height()) + "px",
                    left: 0
                  };
                }
              }
              return element.css(css).animate(zero, 'fast');
            };

            GalleryImage.prototype.slideOut = function(event, element) {
              var css, x, y;
              x = event.offsetX - this.wrapper.width() / 2;
              y = event.offsetY - this.wrapper.height() / 2;
              if (x > 0) {
                if (Math.abs(x) > Math.abs(y)) {
                  css = {
                    'left': "" + (this.wrapper.width()) + "px"
                  };
                } else {
                  if (y < 0) {
                    css = {
                      'top': "-" + (this.wrapper.height()) + "px"
                    };
                  } else {
                    css = {
                      'top': "" + (this.wrapper.height()) + "px"
                    };
                  }
                }
              } else {
                if (Math.abs(x) > Math.abs(y)) {
                  css = {
                    'left': "-" + (this.wrapper.width()) + "px"
                  };
                } else {
                  if (y < 0) {
                    css = {
                      'top': "-" + (this.wrapper.height()) + "px"
                    };
                  } else {
                    css = {
                      'top': "" + (this.wrapper.height()) + "px"
                    };
                  }
                }
              }
              return element.animate(css, 'fast');
            };

            return GalleryImage;

          })();

          LayoutStrategy = (function() {
            LayoutStrategy.create = function(wrapper, config, animationQueue) {
              if (config.mode === "usual") {
                return new GridLayoutStrategy(wrapper, config, animationQueue);
              } else if (config.mode === "vertical-flow") {
                return new VerticalFlowLayoutStrategy(wrapper, config, animationQueue);
              } else if (config.mode === 'horizontal-flow') {
                return new HorizontalFlowLayoutStrategy(wrapper, config, animationQueue);
              }
            };

            function LayoutStrategy($el, options, animationQueue) {
              this.getColumnWidth = __bind(this.getColumnWidth, this);
              this.getColumns = __bind(this.getColumns, this);
              this.reLayoutRequired = __bind(this.reLayoutRequired, this);
              this.layout = __bind(this.layout, this);
              this.add = __bind(this.add, this);
              this.reset = __bind(this.reset, this);
              this.reLayout = __bind(this.reLayout, this);
              this.onResized = __bind(this.onResized, this);
              this.$el = $el;
              this.images = [];
              this.animationQueue = animationQueue;
              $(window).smartresize(this.onResized);
              this.options = options;
              this.reset();
            }

            LayoutStrategy.prototype.onResized = function() {
              if (this.reLayoutRequired()) {
                return this.reLayout();
              }
            };

            LayoutStrategy.prototype.reLayout = function(images) {
              if (images == null) {
                images = null;
              }
              if (images) {
                this.images = images;
              }
              this.reset();
              return this.layout();
            };

            LayoutStrategy.prototype.reset = function() {
              this.index = 0;
              this.width = this.$el.parent().width();
              this.columns = this.getColumns();
              return this.columnWidth = this.getColumnWidth();
            };

            LayoutStrategy.prototype.add = function(images) {
              return this.images = this.images.concat(images);
            };

            LayoutStrategy.prototype.layout = function(images) {
              var size;
              if (images == null) {
                images = null;
              }
              images = images || this.images;
              this.animationQueue.clear();
              this.placeItems(images);
              size = this.getContainerSize();
              return this.$el.css({
                width: size.width + "px",
                height: size.height + "px"
              });
            };

            LayoutStrategy.prototype.reLayoutRequired = function() {
              return this.$el.parent().width() !== this.width;
            };

            LayoutStrategy.prototype.getColumns = function() {
              var columns, fullWidth, width;
              width = this.width;
              columns = Math.floor((width + this.options.gap) / (this.options.width + this.options.gap + this.options.border * 2));
              fullWidth = columns * (this.options.width + this.options.border * 2) + (columns - 1) * this.options.gap;
              if (width > fullWidth) {
                columns = columns + 1;
              }
              if (columns === 0) {
                columns = 1;
              }
              return columns;
            };

            LayoutStrategy.prototype.getColumnWidth = function() {
              var columns;
              columns = this.columns;
              if (columns > 1) {
                return Math.floor((this.width + this.options.gap) / columns - this.options.gap);
              }
              return this.width;
            };

            return LayoutStrategy;

          }).call(this);

          GridLayoutStrategy = (function(_super) {
            __extends(GridLayoutStrategy, _super);

            function GridLayoutStrategy() {
              this.getContainerSize = __bind(this.getContainerSize, this);
              this.placeItems = __bind(this.placeItems, this);
              this.reset = __bind(this.reset, this);
              _ref4 = GridLayoutStrategy.__super__.constructor.apply(this, arguments);
              return _ref4;
            }

            GridLayoutStrategy.prototype.reset = function() {
              GridLayoutStrategy.__super__.reset.apply(this, arguments);
              return this.rowHeight = Math.floor(this.options.height * this.columnWidth / this.options.width);
            };

            GridLayoutStrategy.prototype.placeItems = function(images) {
              var border, col, image, row, x, y, _i, _len, _results;
              if (this.index === 0 && images.length < this.columns) {
                this.columns = images.length;
                this.columnWidth = this.options.width;
                this.rowHeight = this.options.height;
              }
              border = this.options.border * 2;
              _results = [];
              for (_i = 0, _len = images.length; _i < _len; _i++) {
                image = images[_i];
                col = this.index % this.columns;
                row = Math.floor(this.index / this.columns);
                x = col * (this.columnWidth + this.options.gap);
                y = row * (this.rowHeight + this.options.gap);
                image.layout(x, y, this.columnWidth - border, Math.floor(this.rowHeight - border));
                _results.push(this.index += 1);
              }
              return _results;
            };

            GridLayoutStrategy.prototype.getContainerSize = function() {
              var size;
              size = {};
              size.height = Math.ceil(1.0 * this.index / this.columns) * (this.rowHeight + this.options.gap + this.options.border);
              if (this.options.hanging === 'hide' && this.index % this.columns !== 0) {
                size.height -= this.rowHeight + this.options.gap + this.options.border;
              }
              if (this.index < this.columns) {
                size.width = this.columnWidth * this.index;
              } else {
                size.width = this.width;
              }
              return size;
            };

            return GridLayoutStrategy;

          })(LayoutStrategy);

          VerticalFlowLayoutStrategy = (function(_super) {
            __extends(VerticalFlowLayoutStrategy, _super);

            function VerticalFlowLayoutStrategy() {
              this.placeItems = __bind(this.placeItems, this);
              this.reset = __bind(this.reset, this);
              _ref5 = VerticalFlowLayoutStrategy.__super__.constructor.apply(this, arguments);
              return _ref5;
            }

            VerticalFlowLayoutStrategy.prototype.reset = function() {
              var col, _i, _ref6, _results;
              VerticalFlowLayoutStrategy.__super__.reset.apply(this, arguments);
              this.columnHeights = [];
              this.columnImages = [];
              _results = [];
              for (col = _i = 0, _ref6 = this.columns - 1; 0 <= _ref6 ? _i <= _ref6 : _i >= _ref6; col = 0 <= _ref6 ? ++_i : --_i) {
                this.columnImages[col] = [];
                _results.push(this.columnHeights[col] = 0);
              }
              return _results;
            };

            VerticalFlowLayoutStrategy.prototype.placeItems = function(images) {
              var columnIndex, columnWidth, columns, highestColumn, highestHeight, image, imageHeight, imageWidth, lastInHighestColumn, lastInHighestColumnHeight, lowestColumn, lowestHeight, newLowestHeight, _i, _len;
              if (this.index === 0 && images.length < this.columns) {
                this.columns = images.length;
                this.columnWidth = this.options.width;
              }
              columns = this.columns;
              columnWidth = this.columnWidth;
              imageWidth = columnWidth - this.options.border * 2;
              for (_i = 0, _len = images.length; _i < _len; _i++) {
                image = images[_i];
                imageHeight = image.naturalHeight * imageWidth * 1.0 / image.naturalWidth;
                columnIndex = this.index % columns;
                this.columnImages[columnIndex].push(image);
                image.layout(columnIndex * columnWidth + this.options.gap * columnIndex, this.columnHeights[columnIndex] + this.options.gap, imageWidth, imageHeight);
                this.columnHeights[columnIndex] += imageHeight + this.options.gap + this.options.border * 2;
                this.index += 1;
              }
              while (true) {
                lowestColumn = $.inArray(Math.min.apply(null, this.columnHeights), this.columnHeights);
                highestColumn = $.inArray(Math.max.apply(null, this.columnHeights), this.columnHeights);
                if (lowestColumn === highestColumn) {
                  return;
                }
                lastInHighestColumn = this.columnImages[highestColumn].pop();
                if (!lastInHighestColumn) {
                  return;
                }
                lastInHighestColumnHeight = lastInHighestColumn.naturalHeight * imageWidth / lastInHighestColumn.naturalWidth + this.options.gap + this.options.border * 2;
                lowestHeight = this.columnHeights[lowestColumn];
                highestHeight = this.columnHeights[highestColumn];
                newLowestHeight = lowestHeight + lastInHighestColumnHeight;
                if (newLowestHeight >= highestHeight) {
                  return;
                }
                this.columnImages[lowestColumn].push(lastInHighestColumn);
                lastInHighestColumn.layout(lowestColumn * (this.columnWidth + this.options.gap), this.columnHeights[lowestColumn] + this.options.gap);
                this.columnHeights[highestColumn] -= lastInHighestColumnHeight;
                this.columnHeights[lowestColumn] += lastInHighestColumnHeight;
              }
            };

            VerticalFlowLayoutStrategy.prototype.getContainerSize = function() {
              var height, i, size, _i, _ref6;
              height = 0;
              size = {};
              for (i = _i = 0, _ref6 = this.columns - 1; 0 <= _ref6 ? _i <= _ref6 : _i >= _ref6; i = 0 <= _ref6 ? ++_i : --_i) {
                if (this.columnHeights[i] > height) {
                  height = this.columnHeights[i];
                }
              }
              if (this.index < this.columns) {
                size.width = this.columnWidth * this.index;
              } else {
                size.width = this.width;
              }
              size.height = height + this.options.gap;
              return size;
            };

            return VerticalFlowLayoutStrategy;

          })(LayoutStrategy);

          HorizontalFlowLayoutStrategy = (function(_super) {
            __extends(HorizontalFlowLayoutStrategy, _super);

            function HorizontalFlowLayoutStrategy() {
              this.getContainerSize = __bind(this.getContainerSize, this);
              this.placeItems = __bind(this.placeItems, this);
              this.startNewRow = __bind(this.startNewRow, this);
              this.shrinkCurrentRow = __bind(this.shrinkCurrentRow, this);
              this.reset = __bind(this.reset, this);
              _ref6 = HorizontalFlowLayoutStrategy.__super__.constructor.apply(this, arguments);
              return _ref6;
            }

            HorizontalFlowLayoutStrategy.prototype.reset = function() {
              HorizontalFlowLayoutStrategy.__super__.reset.apply(this, arguments);
              this.currentRow = [];
              this.sizes = [];
              this.currentRowWidth = 0;
              this.rows = [this.currentRow];
              this.elementSizes = [this.sizes];
              this.height = 0;
              return this.prevWidth = 0;
            };

            HorizontalFlowLayoutStrategy.prototype.shrinkCurrentRow = function(newHeight) {
              var shrinkFactor, x,
                _this = this;
              x = 0;
              shrinkFactor = this.options.height / newHeight;
              return $.each(this.currentRow, function(rowIndex, image) {
                var imageWidth;
                if (rowIndex !== _this.currentRow.length - 1 || _this.currentRowWidth < _this.prevWidth) {
                  imageWidth = Math.floor(_this.sizes[rowIndex] / shrinkFactor);
                  image.layout(x, _this.height, imageWidth, newHeight);
                  return x += imageWidth + _this.options.gap + _this.options.border * 2;
                } else {
                  return image.layout(x, _this.height, _this.width - x - _this.options.border * 2, newHeight);
                }
              });
            };

            HorizontalFlowLayoutStrategy.prototype.startNewRow = function() {
              this.rows.push(this.currentRow = []);
              this.elementSizes.push(this.sizes = []);
              return this.currentRowWidth = 0;
            };

            HorizontalFlowLayoutStrategy.prototype.placeItems = function(images) {
              var elementWidth, height, image, index, shrinkFactor, width, x, _i, _len,
                _this = this;
              width = this.width;
              index = 0;
              for (_i = 0, _len = images.length; _i < _len; _i++) {
                image = images[_i];
                this.currentRow.push(image);
                this.sizes.push(elementWidth = image.naturalWidth / image.naturalHeight * this.options.height);
                this.currentRowWidth += elementWidth + this.options.gap + this.options.border * 2;
                if (this.currentRowWidth >= width + this.options.gap) {
                  this.currentRowWidth -= this.options.gap;
                  shrinkFactor = (this.currentRowWidth - (this.currentRow.length - 1) * this.options.gap - this.currentRow.length * this.options.border * 2) / (width - (this.currentRow.length - 1) * this.options.gap - this.currentRow.length * this.options.border * 2);
                  height = Math.floor(this.options.height / shrinkFactor);
                  this.shrinkCurrentRow(height);
                  this.height += height + this.options.gap + this.options.border * 2;
                  this.startNewRow();
                }
                index += 1;
              }
              if (this.currentRowWidth < this.width) {
                x = 0;
                return $.each(this.currentRow, function(rowIndex, image) {
                  var imageWidth;
                  imageWidth = Math.floor(_this.sizes[rowIndex]);
                  image.layout(x, _this.height, imageWidth, _this.options.height);
                  return x += imageWidth + _this.options.gap + _this.options.border * 2;
                });
              }
            };

            HorizontalFlowLayoutStrategy.prototype.getContainerSize = function() {
              var size;
              size = {};
              if (this.rows.length > 1) {
                size.height = this.height;
                if (this.options.hanging === "hide" && this.currentRowWidth < this.width) {
                  size.height -= this.options.height;
                }
              } else {
                if (this.currentRow.length > 0) {
                  size.height = this.options.height + this.options.gap + this.options.border * 2;
                } else {
                  size.height = 0;
                }
              }
              if (this.rows.length < 2 && this.currentRowWidth > 0) {
                size.width = this.currentRowWidth;
              } else {
                size.width = this.width;
              }
              return size;
            };

            return HorizontalFlowLayoutStrategy;

          })(LayoutStrategy);

          return AwesomeGallery;

        }).call(this);
        return window.AwesomeGallery = AwesomeGallery;
      }
    }
  })(window.asgjQuery || window.jQuery || window.$ || jQuery || $);

}).call(this);
